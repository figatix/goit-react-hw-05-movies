{"version":3,"file":"static/js/399.6d05e4dc.chunk.js","mappings":"2UAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACHC,EAAiB,8BAEjBC,EAAgB,mCAAG,sGACPH,EAAAA,EAAAA,IAAA,sBAAiC,CACtDI,OAAQ,CACNC,QAASJ,EACTK,KAAM,KAJoB,uBACtBC,EADsB,EACtBA,KADsB,kBAOvBA,GAPuB,2CAAH,qDAWhBC,EAAW,mCAAG,WAAOC,GAAP,8FAAcH,EAAd,+BAAqB,EAArB,SACFN,EAAAA,EAAAA,IAAU,gBAAiB,CAChDI,OAAQ,CACNC,QAASJ,EACTQ,MAAAA,EACAH,KAAAA,KALqB,uBACjBC,EADiB,EACjBA,KADiB,kBAQlBA,GARkB,2CAAH,sDAWXG,EAAe,mCAAG,WAAOC,GAAP,yFACNX,EAAAA,EAAAA,IAAA,iBAAoBW,GAAM,CAC/CP,OAAQ,CACNC,QAASJ,KAHgB,uBACrBM,EADqB,EACrBA,KADqB,kBAMtBA,GANsB,2CAAH,sDASfK,EAAe,mCAAG,WAAOD,GAAP,yFACNX,EAAAA,EAAAA,IAAA,iBAAoBW,EAApB,YAAkC,CACvDP,OAAQ,CACNC,QAASJ,KAHgB,uBACrBM,EADqB,EACrBA,KADqB,kBAMtBA,GANsB,2CAAH,sDASfM,EAAe,mCAAG,WAAOF,GAAP,yFACNX,EAAAA,EAAAA,IAAA,iBAAoBW,EAApB,YAAkC,CACvDP,OAAQ,CACNC,QAASJ,KAHgB,uBACrBM,EADqB,EACrBA,KADqB,kBAMtBA,GANsB,2CAAH,qD,kLC5CfO,EAAgBC,EAAAA,GAAAA,IAAH,4CAGbC,EAAWD,EAAAA,GAAAA,GAAH,0JAURE,EAAWF,EAAAA,GAAAA,GAAH,oHAORG,EAAYH,EAAAA,GAAAA,IAAH,+C,SCgCtB,EA9CkB,WAChB,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAcC,EAAAA,EAAAA,MAAdD,WAERE,EAAAA,EAAAA,YAAU,WACR,GAAkB,OAAdF,EAAJ,CACA,IAAMG,EAAW,mCAAG,WAAOH,GAAP,mGAEOV,EAAAA,EAAAA,IAAgBU,GAFvB,gBAERI,EAFQ,EAERA,KACRL,EAAUK,GAHM,gDAMhBC,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAY,KAAIC,SAPA,yDAAH,sDAWjBL,EAAYH,EAZkB,CAa/B,GAAE,CAACA,IAEJ,IAAMS,EAA2B,IAAlBX,EAAOY,OAEtB,OACE,SAAClB,EAAD,UACGiB,GACE,SAACf,EAAD,UACEI,EAAOa,KAAI,YAA4C,IAAzCtB,EAAwC,EAAxCA,GAAIuB,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5BC,EAAkBD,EAAY,UAC7BlC,EAAAA,GAD6B,eACRkC,GACxB,oDACJ,OACE,UAACnB,EAAD,YACE,SAACC,EAAD,CAAWoB,IAAKD,EAAiBE,IAAKL,EAAMM,MAAM,MAAMC,OAAO,SAC/D,wBAAKP,KACL,uBAAIC,MAHSxB,EAAKwB,EAMvB,OAEF,mEAKR,C","sources":["components/utils/ApiMovies.jsx","pages/MovieCast/MovieCast.styled.js","pages/MovieCast/MovieCast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c0f6c237cceca90b2071a7042fc52b4a';\nexport const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/';\n\nexport const getPopularMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    }\n  })\n  return data;\n}\n\n\nexport const searchMovie = async (query, page = 1) => {\n  const { data } = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    }\n  })\n  return data\n}\n\nexport const getMovieDetails = async (id) => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    }\n  })\n  return data;\n}\n\nexport const getMovieCredits = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    }\n  })\n  return data;\n}\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    }\n  })\n  return data;\n}\n","import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  padding: 0 30px;\n`;\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const CastImage = styled.img`\n  border-radius: 50%;\n`;\n","\nimport { getMovieCredits, IMAGE_BASE_URL } from \"components/utils/ApiMovies\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { CastContainer, CastImage, CastItem, CastList } from \"./MovieCast.styled\";\n\n\nconst MovieCast = () => {\n  const [actors, setActors] = useState([]);\n  const { detailsId } = useParams();\n\n  useEffect(() => {\n    if (detailsId === null) return;\n    const fetchActors = async (detailsId) => {\n      try {\n        const { cast } = await getMovieCredits(detailsId);\n        setActors(cast);\n\n      } catch (err) {\n        console.log(err);\n        toast.error(err.message)\n      }\n    };\n\n    fetchActors(detailsId);\n  }, [detailsId]);\n\n  const isCast = actors.length !== 0;\n\n  return (\n    <CastContainer>\n      {isCast ?\n        (<CastList>\n          {actors.map(({ id, name, character, profile_path }) => {\n            const profileImageUrl = profile_path\n              ? `${IMAGE_BASE_URL}w500${profile_path}`\n              : 'https://via.placeholder.com/150x225?text=No+Image';\n            return (\n              <CastItem key={id + character}>\n                <CastImage src={profileImageUrl} alt={name} width=\"150\" height=\"225\" />\n                <h4>{name}</h4>\n                <p>{character}</p>\n              </CastItem>\n            );\n          })}\n        </CastList>) :\n        (<p>We don't have any cast for this movie.</p>)\n      }\n\n    </CastContainer>\n  );\n};\n\nexport default MovieCast;\n\n"],"names":["axios","API_KEY","IMAGE_BASE_URL","getPopularMovies","params","api_key","page","data","searchMovie","query","getMovieDetails","id","getMovieCredits","getMovieReviews","CastContainer","styled","CastList","CastItem","CastImage","useState","actors","setActors","detailsId","useParams","useEffect","fetchActors","cast","console","log","toast","message","isCast","length","map","name","character","profile_path","profileImageUrl","src","alt","width","height"],"sourceRoot":""}